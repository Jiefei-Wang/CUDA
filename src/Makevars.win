CUDA_HOME = C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.2
PKG_CPPFLAGS = -I. -I"${CUDA_HOME}/include" -std=c++11
R_HOME = C:/Program Files/R/R-3.5.0
CXX = C:/RBuildTools/3.5/mingw_64/bin


#########################################

R_INC = /usr/share/R/include
RCPP_INC = $(R_HOME)/Rcpp/include

NVCC = $(CUDA_HOME)/bin/nvcc
CUDA_INC = $(CUDA_HOME)/include
CUDA_LIB = $(CUDA_HOME)/lib64

# This defines what the shared object libraries will be
PKG_LIBS= -L$(CUDA_LIB) -L$(CUDA_LIB)/stubs -Wl,-rpath,$(CUDA_LIB) -lnvrtc -lcudart -lcuda -d

NVCC_FLAGS = -Xcompiler "-fPIC"  -I$(R_INC) -ccbin "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017\bin\HostX86\x64"

### Define objects
cu_sources := $(wildcard *cu)
cu_sharedlibs := $(patsubst %.cu, %.o,$(cu_sources))

cpp_sources := $(wildcard *.cpp)
cpp_sharedlibs := $(patsubst %.cpp, %.o, $(cpp_sources))

OBJECTS = $(cu_sharedlibs) $(cpp_sharedlibs)

all : rcppcuda.so

rcppcuda.so: $(OBJECTS)

%.o: %.cpp $(cpp_sources)
			$(CXX) $< -c -fPIC -I$(R_INC) -I$(RCPP_INC)  -std=c++11 -I.

%.o: %.cu $(cu_sources)
			$(NVCC) $(NVCC_FLAGS) -I$(CUDA_INC) $< -c  -std=c++11 -I. 
