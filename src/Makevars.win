CUDA_HOME = C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.2
#PKG_CPPFLAGS = -I. -I"${CUDA_HOME}/include" -std=c++11
#R_HOME = C:/PROGRA~1/R/R-35~1.0
#CXX = C:/RBuildTools/3.5/mingw_64/bin
R_PACKAGES= C:\Users\Jeff\Documents\R\win-library\3.5


#########################################

R_INC = "$(R_HOME)/include"
RCPP_INC = "${R_PACKAGES}\Rcpp\include"

NVCC = "${CUDA_HOME}/bin/nvcc"
CUDA_INC = "${CUDA_HOME}/include"
CUDA_LIB = "${CUDA_HOME}/lib64"

VS_SUPPORT= "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017\bin\HostX86\x64"


# This defines what the shared object libraries will be
PKG_LIBS= -L${CUDA_LIB} -lcudart_static -lcusparse

NVCC_FLAGS = -Xcompiler "-fPIC"  -ccbin ${VS_SUPPORT}
	
### Define objects
cu_sources=$(wildcard *.cu)
cu_sharedlibs=$(cu_sources:.cu=.obj)

#cu_sources=MatrixOperation.cu Rfuncs.cu SparseMatrix.cu Test_Tools.cu Tools.cu
#cu_sharedlibs=MatrixOperation.obj Rfuncs.obj SparseMatrix.obj Test_Tools.obj Tools.obj


#cu_sources := $(wildcard *cu)
#cu_sharedlibs := $(patsubst %.cu, %.o,$(cu_sources))

cpp_sources := $(wildcard *.cpp)
cpp_sharedlibs := $(cpp_sources:.cpp=.o)

OBJECTS = $(cu_sharedlibs) $(cpp_sharedlibs)

all: rcppcuda.so

rcppcuda.so: ${OBJECTS}
	$(NVCC) ${PKG_LIBS} -o kernel.dll --shared $(cu_sharedlibs) -ccbin ${VS_SUPPORT}
	
%.o: %.cpp $(cpp_sources)
			$(CXX) $< -c -fPIC -I$(R_INC) -I$(RCPP_INC)   -std=c++11 -I.

%.obj: %.cu $(cu_sources)
			$(NVCC) $(NVCC_FLAGS) -I$(CUDA_INC) -o$< -c  -std=c++11 -I.  
