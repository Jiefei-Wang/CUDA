sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
sparseData<-function(row=10,col=10,nonzero=5){
library("Matrix")
mydata=matrix(0,row,col)
mydata[sample(1:length(mydata),nonzero)]=rbinom(nonzero,10,0.5)+1
m <- Matrix(mydata,sparse=T)
dataframe=m@x
rowind=m@i
colind=m@p
list(dataframe=dataframe,rowind=rowind,colind=colind,
rowNum=row,colNum=col,dataMatrix=mydata,
sparseMatrix=m
)
}
test_that("Matrix sum",{
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
row_result=rowSums(mycuda)
expect_equal(col_result,base::colSums(test.data$dataMatrix))
expect_equal(row_result,base::rowSums(test.data$dataMatrix))
dyn.unload(lib_file)
})
library(testthat)
test_that("Matrix sum",{
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
row_result=rowSums(mycuda)
expect_equal(col_result,base::colSums(test.data$dataMatrix))
expect_equal(row_result,base::rowSums(test.data$dataMatrix))
dyn.unload(lib_file)
})
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
?setGeneric
?getGeneric
.CUDAispase=setClass("CUDAispase",
slot=c(data="vector",rowNum="numeric",colNum="numeric",
rowInd="vector",colInd="vector",
offset="numeric",GPUaddress="vector",status="character"))
CUDAispase<-function(data,rowNum,colNum,rowInd,colInd){
obj=.CUDAispase(data=as.double(data),rowNum=as.double(rowNum),colNum=as.double(colNum),rowInd=as.double(rowInd),colInd=as.double(colInd))
obj@offset=as.double(0)
obj@status="ready"
obj@GPUaddress=vector()
return(obj)
}
setGeneric(name="upload",def=function(obj){standardGeneric("upload")})
setMethod(f="upload",signature = "CUDAispase",
definition=function(obj){
obj@GPUaddress=as.double(rep(0,9))
result=.C("upload",
obj@data,obj@rowInd,obj@colInd,
as.double(c(length(obj@data),length(obj@rowInd),length(obj@colInd),obj@rowNum,obj@colNum)),
obj@offset,obj@GPUaddress)
obj@GPUaddress=result[[length(result)]]
return(obj)
})
setGeneric(name="download",def=function(obj){standardGeneric("download")})
setMethod(f="download",signature = "CUDAispase",
definition=function(obj){
if(length(obj@GPUaddress)==0){
stop("The GPU data does not exist")
}
result=.C("download",
obj@data,obj@rowInd,obj@colInd,obj@GPUaddress)
obj@data=result[[1]]
obj@rowInd=result[[2]]
obj@colInd=result[[3]]
return(obj)
})
rowSums=getGeneric(f="rowSums")
#setGeneric(name="rowSums",def=function(obj){standardGeneric("rowSums")})
setMethod(f="rowSums",
signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
colSums=getGeneric(f="rowSums")
#setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
sparseData<-function(row=10,col=10,nonzero=5){
library("Matrix")
mydata=matrix(0,row,col)
mydata[sample(1:length(mydata),nonzero)]=rbinom(nonzero,10,0.5)+1
m <- Matrix(mydata,sparse=T)
dataframe=m@x
rowind=m@i
colind=m@p
list(dataframe=dataframe,rowind=rowind,colind=colind,
rowNum=row,colNum=col,dataMatrix=mydata,
sparseMatrix=m
)
}
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
colSums=getGeneric(f="colSums")
#setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
col_result=colSums(mycuda)
row_result=rowSums(mycuda)
#rowSums=getGeneric(f="rowSums")
#setGeneric(name="rowSums",def=function(obj){standardGeneric("rowSums")})
setMethod(f="rowSums",
signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
getGeneric(f="rowSums")
showMethods("rowSums")
row_result=rowSums(mycuda)
showMethods("rowSums")
row_result=rowSums(mycuda,na.rm = F,dims=1)
row_result=rowSums(mycuda,na.rm = F,dims=1L)
#rowSums=getGeneric(f="rowSums")
#setGeneric(name="rowSums",def=function(obj){standardGeneric("rowSums")})
setMethod(f="rowSums",
signature = signature(x="CUDAispase",na.rm="ANY",dims="ANY"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
row_result=rowSums(mycuda,na.rm = F,dims=1L)
row_result=rowSums(mycuda)
row_result
#rowSums=getGeneric(f="rowSums")
setGeneric(name="rowSums",signature = c("x"))
setMethod(f="rowSums",
signature = signature(x="CUDAispase",na.rm="ANY",dims="ANY"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
setMethod(f="rowSums",
signature = signature(x="CUDAispase"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
row_result=rowSums(mycuda)
showMethods("rowSums")
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
TENxMatrix
library(rhdf5)
library(ExperimentHub)
library(HDF5Array)
TENxMatrix
.CUDAispase=setClass("CUDAispase",
slot=c(data="vector",rowNum="numeric",colNum="numeric",
rowInd="vector",colInd="vector",
offset="numeric",GPUaddress="vector",status="character"))
CUDAispase<-function(data,rowNum,colNum,rowInd,colInd){
obj=.CUDAispase(data=as.double(data),rowNum=as.double(rowNum),colNum=as.double(colNum),rowInd=as.double(rowInd),colInd=as.double(colInd))
obj@offset=as.double(0)
obj@status="ready"
obj@GPUaddress=vector()
return(obj)
}
setGeneric(name="upload",def=function(obj){standardGeneric("upload")})
setMethod(f="upload",signature = "CUDAispase",
definition=function(obj){
obj@GPUaddress=as.double(rep(0,9))
result=.C("upload",
obj@data,obj@rowInd,obj@colInd,
as.double(c(length(obj@data),length(obj@rowInd),length(obj@colInd),obj@rowNum,obj@colNum)),
obj@offset,obj@GPUaddress)
obj@GPUaddress=result[[length(result)]]
return(obj)
})
setGeneric(name="download",def=function(obj){standardGeneric("download")})
setMethod(f="download",signature = "CUDAispase",
definition=function(obj){
if(length(obj@GPUaddress)==0){
stop("The GPU data does not exist")
}
result=.C("download",
obj@data,obj@rowInd,obj@colInd,obj@GPUaddress)
obj@data=result[[1]]
obj@rowInd=result[[2]]
obj@colInd=result[[3]]
return(obj)
})
#rowSums=getGeneric(f="rowSums")
setGeneric(name="rowSums",signature = c("x"))
setMethod(f="rowSums",
signature = signature(x="CUDAispase"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#colSums=getGeneric(f="colSums")
#setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
sparseData<-function(row=10,col=10,nonzero=5){
library("Matrix")
mydata=matrix(0,row,col)
mydata[sample(1:length(mydata),nonzero)]=rbinom(nonzero,10,0.5)+1
m <- Matrix(mydata,sparse=T)
dataframe=m@x
rowind=m@i
colind=m@p
list(dataframe=dataframe,rowind=rowind,colind=colind,
rowNum=row,colNum=col,dataMatrix=mydata,
sparseMatrix=m
)
}
test_that("Matrix upload and download",{
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
mycuda.upload
upload(mycuda)
mycuda@data=as.double(rep(0,length(test.data$dataframe)))
mycuda@rowInd=as.double(rep(0,length(test.data$dataframe)))
mycuda@colInd=as.double(rep(0,length(test.data$colind)))
mycuda=download(mycuda)
expect_equal(mycuda@data,test.data$dataframe)
expect_equal(mycuda@rowInd,test.data$rowind)
expect_equal(mycuda@colInd,test.data$colind)
dyn.unload(lib_file)
})
test_that("Matrix upload and download",{
lib_file="src/kernel.dll"
dyn.load(lib_file)
k=100
test.data=sparseData(row=k,col=k,nonzero=k*k/2)
mycuda=CUDAispase(test.data$dataframe,test.data$rowNum,test.data$colNum,test.data$rowind,test.data$colind)
mycuda=upload(mycuda)
mycuda@data=as.double(rep(0,length(test.data$dataframe)))
mycuda@rowInd=as.double(rep(0,length(test.data$dataframe)))
mycuda@colInd=as.double(rep(0,length(test.data$colind)))
mycuda=download(mycuda)
expect_equal(mycuda@data,test.data$dataframe)
expect_equal(mycuda@rowInd,test.data$rowind)
expect_equal(mycuda@colInd,test.data$colind)
dyn.unload(lib_file)
})
devtools::test()
traceback()
devtools::load_all()
.CUDAispase=setClass("CUDAispase",
slot=c(data="vector",rowNum="numeric",colNum="numeric",
rowInd="vector",colInd="vector",
offset="numeric",GPUaddress="vector",status="character"))
CUDAispase<-function(data,rowNum,colNum,rowInd,colInd){
obj=.CUDAispase(data=as.double(data),rowNum=as.double(rowNum),colNum=as.double(colNum),rowInd=as.double(rowInd),colInd=as.double(colInd))
obj@offset=as.double(0)
obj@status="ready"
obj@GPUaddress=vector()
return(obj)
}
setGeneric(name="upload",def=function(obj){standardGeneric("upload")})
setMethod(f="upload",signature = "CUDAispase",
definition=function(obj){
obj@GPUaddress=as.double(rep(0,9))
result=.C("upload",
obj@data,obj@rowInd,obj@colInd,
as.double(c(length(obj@data),length(obj@rowInd),length(obj@colInd),obj@rowNum,obj@colNum)),
obj@offset,obj@GPUaddress)
obj@GPUaddress=result[[length(result)]]
return(obj)
})
setGeneric(name="download",def=function(obj){standardGeneric("download")})
setMethod(f="download",signature = "CUDAispase",
definition=function(obj){
if(length(obj@GPUaddress)==0){
stop("The GPU data does not exist")
}
result=.C("download",
obj@data,obj@rowInd,obj@colInd,obj@GPUaddress)
obj@data=result[[1]]
obj@rowInd=result[[2]]
obj@colInd=result[[3]]
return(obj)
})
# #rowSums=getGeneric(f="rowSums")
# setGeneric(name="rowSums",signature = c("x"))
# setMethod(f="rowSums",
#           signature = signature(x="CUDAispase"),
#           definition = function(x,na.rm=FALSE,dims=1){
#             if(length(x@GPUaddress)==0){
#               stop("The GPU data does not exist")
#             }
#             sumResult=as.double(rep(0,x@rowNum))
#             result=.C("colSums",
#                       as.integer(1),x@GPUaddress,sumResult)
#             sumResult=result[[length(result)]]
#             return(sumResult)
#           })
# #colSums=getGeneric(f="colSums")
# #setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
# setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
#           definition = function(x,na.rm=FALSE,dims=1){
#             if(length(x@GPUaddress)==0){
#               stop("The GPU data does not exist")
#             }
#             sumResult=as.double(rep(0,x@rowNum))
#             result=.C("colSums",
#                       as.integer(2),x@GPUaddress,sumResult)
#             sumResult=result[[length(result)]]
#             return(sumResult)
#           })
lib_file="src/kernel.dll"
dyn.load(lib_file)
mycuda=CUDAispase(data,row,col,10,10)
data=c(3,7,5,6,8,7,5,3,6,5,9,8,3,4,7,6,7,4,8,6,6,6,6,5,4,3,9,7,6,9,4,6,4,4,5,5,3,5,3,6,8,6,4,7,5,8,6,5,7,6 )
row=c(0,1,2,4,5,6,7,9,1,4,8,0,3,5,7,9,2,4,5,7,9,2,4,6,9,1,5,6,7,8,1,2,4,5,0,3,6,7,9,2,3,4,8,9,0,1,2,3,5,7)
col=c(0,8,11,16,21,25,30,34,39,44,50)
mycuda=CUDAispase(data,row,col,10,10)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
row_result=rowSums(mycuda)
#rowSums=getGeneric(f="rowSums")
setGeneric(name="rowSums",signature = c("x"))
setMethod(f="rowSums",
signature = signature(x="CUDAispase"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#colSums=getGeneric(f="colSums")
#setGeneric(name="colSums",def=function(obj){standardGeneric("colSums")})
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#rowSums=getGeneric(f="rowSums")
setGeneric(name="rowSums",signature = c("x"))
setMethod(f="rowSums",
signature = signature(x="CUDAispase"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(1),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#colSums=getGeneric(f="colSums")
setGeneric(name="colSums",signature = c("x"))
setMethod(f="colSums",signature = signature(x="CUDAispase",na.rm="logical",dims="integer"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
#colSums=getGeneric(f="colSums")
setGeneric(name="colSums",signature = c("x"))
setMethod(f="colSums",signature = signature(x="CUDAispase"),
definition = function(x,na.rm=FALSE,dims=1){
if(length(x@GPUaddress)==0){
stop("The GPU data does not exist")
}
sumResult=as.double(rep(0,x@rowNum))
result=.C("colSums",
as.integer(2),x@GPUaddress,sumResult)
sumResult=result[[length(result)]]
return(sumResult)
})
col_result=colSums(mycuda)
colSums
showMethods("colSums")
row_result=rowSums(mycuda)
dyn.unload(lib_file)
dyn.load(lib_file)
data=c(3,7,5,6,8,7,5,3,6,5,9,8,3,4,7,6,7,4,8,6,6,6,6,5,4,3,9,7,6,9,4,6,4,4,5,5,3,5,3,6,8,6,4,7,5,8,6,5,7,6 )
row=c(0,1,2,4,5,6,7,9,1,4,8,0,3,5,7,9,2,4,5,7,9,2,4,6,9,1,5,6,7,8,1,2,4,5,0,3,6,7,9,2,3,4,8,9,0,1,2,3,5,7)
col=c(0,8,11,16,21,25,30,34,39,44,50)
mycuda=CUDAispase(data,10,10,row,col)
mycuda=upload(mycuda)
col_result=colSums(mycuda)
row_result=rowSums(mycuda)
row_result
sum(row==5)
sum(row==0)
library(rhdf5)
library(ExperimentHub)
library(HDF5Array)
hub=ExperimentHub()
fl=hub[["EH1039"]]
BiocManager::install(pkgs="ExperimentHub",version = "devel")
